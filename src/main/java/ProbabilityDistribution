//
//import java.util.*;
//
//import org.apache.spark.api.java.JavaPairRDD;
//import org.apache.spark.api.java.JavaRDD;
//import org.apache.spark.api.java.JavaSparkContext;
//import org.apache.spark.SparkConf;
//import org.apache.spark.storage.StorageLevel;
//import scala.Serializable;
//import scala.Tuple2;
//
//
//public final class ProbabilityDistribution {
//
//    static final double radius=6371.009;
//
//    static final float toRadians= (float)(Math.PI / 180);
//    static final double top = 49.3457868 ;// north lat
//    static final double left = -124.7844079;// west long
//    static final double right = -66.9513812; // east long
//    static final double bottom =  24.7433195; // south lat
//    static int bins=120;
//    static Double divisions;
//    static Double max;
//    static Double min;
//    static Double z;
//
//
//    public static class MaxComparator implements Serializable, Comparator<Double> {
//        public int compare(Double a, Double b) {
//            if (a< b) return -1;
//            else if (a > b) return 1;
//            return 0;
//        }
//    }
//    public static class MinComparator implements Serializable, Comparator<Double> {
//        public int compare(Double a, Double b) {
//            if (a< b) return 1;
//            else if (a > b) return -1;
//            return 0;
//        }
//    }
//
//
//    public static void main(String[] args) throws Exception {
//
//        JavaSparkContext sc = new JavaSparkContext(new SparkConf().setMaster("local").setAppName("Spark Count"));
//
//
//        JavaRDD<String> textFile = sc.textFile(args[0]);
//        JavaRDD<Double> distances=textFile.map(s -> {
//            String[]info= s.split(" ");
//            float starLat=Float.parseFloat(info[2]);
//            float starLong = Float.parseFloat(info[3]);
//            float endLat = Float.parseFloat(info[5]);
//            float endLong = Float.parseFloat(info[6]);
//            if  ((bottom<starLat && starLat<top )&& (bottom<endLat&&endLat<top )&&(left<starLong&&starLong<right)&&(left<endLong&&endLong<right)){
//                double deltaLat = Math.pow((starLat - endLat) * toRadians, 2f);
//                double deltaLong = (starLong - endLong) * toRadians;
//                double cosMeanLatitude = Math.cos(((starLat + endLat) / 2) * toRadians);
//                double second = Math.pow(cosMeanLatitude * deltaLong, 2);
//                double distance = radius * Math.sqrt(deltaLat + second);
//                if (distance < 200) {
//                    return distance;
//                } else {
//                    System.out.println("Skipped: " + s);
//                    return null;
//                }
//            }else{
//                System.out.println("forbidden! "+s);
//                return null;
//            }
//
//        });
//        //distances.collect();
//        JavaRDD cachedRdd = distances.persist(StorageLevel.MEMORY_ONLY());
//        JavaRDD<Double> filteredDistances=cachedRdd.filter(aDouble -> aDouble!=null);
//        max=filteredDistances.max(new MaxComparator());
//        min=filteredDistances.max(new MinComparator());
//        System.out.println(max);
//        System.out.println(min);
//        bins=120;
//        divisions=(max-min)/(bins);
//        JavaPairRDD<Integer,Double> pairs=filteredDistances.mapToPair(aDouble -> {
//            double bucket=aDouble-min;
//            int index=(int)(bucket/divisions);
//            return new Tuple2<Integer,Double>(index,1.0);
//        });
//        z=(double)(pairs.count());
//        JavaPairRDD<Integer, Double> counts = pairs.reduceByKey((aDouble, aDouble2) -> aDouble+aDouble2);
//        JavaPairRDD<Integer, Double> countsOrdered= counts.sortByKey();
//        JavaPairRDD<Integer, Double> countsNormalized=countsOrdered.mapValues(aDouble -> aDouble/z);
//        countsNormalized.foreach(p -> System.out.println(p));
////        Double [] numbers=distances.rdd().collect();
////        DoubleSummaryStatistics stat = Arrays.stream(numbers).max()
////        int min = stat.getMin();
////        int max = stat.getMax();
////
//
////        maxValue=max(distances)
////        minValue=min(distances)
////        print(minValue)
////        print(maxValue)
////        bins=120
////        divisions=(maxValue-minValue)/(bins)
////                print(divisions)
////        probs=[0.0 for _ in range(int(bins))]
////        for i in distances:
////        bucket=i-minValue
////        index=int(bucket/divisions)
////    #print(index)
////        if(index>=len(probs)):
////        index=index-1
////        #print(bucket)
////        #print(index)
////        probs[index]+=1.0
////        total=len(distances)
////        for i,val in enumerate( probs):
////        probs[i]=val/total
////        probs
////        JavaRDD<String> words = textFile.flatMap(new FlatMapFunction<String, String>() {
////            public Iterator<String> call(String s) { return Arrays.asList(s.split(" ")).iterator(); }
////        });
////        JavaPairRDD<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {
////            public Tuple2<String, Integer> call(String s) { return new Tuple2<String, Integer>(s, 1); }
////        });
////        JavaPairRDD<String, Integer> counts = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {
////            public Integer call(Integer a, Integer b) { return a + b; }
////        });
////        counts.foreach(p -> System.out.println(p));
//        countsNormalized.saveAsTextFile(args[1]);
//        System.exit(0);
//    }
//}
//
